import os
import telebot
import requests
from bs4 import BeautifulSoup
from flask import Flask, request
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
SEARCH_URL = "https://www.google.com/search?q={}&hl=ru"
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
}

def google_search(query):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Google –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        formatted_query = query.replace(" ", "+")
        response = requests.get(
            SEARCH_URL.format(formatted_query), 
            headers=HEADERS, 
            timeout=10
        )
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'lxml')
        results = []
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Google
        result_blocks = soup.find_all('div', class_='tF2Cxc') or soup.find_all('div', class_='MjjYud')
        
        for block in result_blocks[:3]:
            title_elem = block.find('h3') or block.find('div', role='heading') or block.find('h3', class_='LC20lb')
            link_elem = block.find('a', href=True)
            snippet_elem = block.find('div', class_='VwiC3b') or block.find('div', class_='yXK7lf')
            
            title = title_elem.get_text(strip=True) if title_elem else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            link = link_elem['href'] if link_elem else "#"
            snippet = snippet_elem.get_text(strip=True)[:300] if snippet_elem else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            results.append({
                "title": title,
                "url": link,
                "snippet": snippet
            })
            
        return results if results else None
        
    except requests.exceptions.Timeout:
        return [{"title": "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞", "snippet": "Google –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è", "url": ""}]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                          "‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –û–û–ü?\n"
                          "‚Ä¢ –§–æ—Ä–º—É–ª–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞\n"
                          "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã\n\n"
                          "–Ø –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –∏ –ø–æ–∫–∞–∂—É –∏—Å—Ç–æ—á–Ω–∏–∫–∏!")

@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        search_results = google_search(message.text)
        
        if not search_results:
            return bot.reply_to(message, "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
        
        response = "üîç –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n"
        for i, res in enumerate(search_results, 1):
            response += f"<b>{i}. {res['title']}</b>\n"
            response += f"<i>{res['snippet']}</i>\n"
            response += f"<a href='{res['url']}'>üîó –ò—Å—Ç–æ—á–Ω–∏–∫</a>\n\n"
        
        bot.send_message(
            chat_id=message.chat.id,
            text=response,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@app.route('/')
def home():
    return "ü§ñ Telegram Search Bot –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram"

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_data = request.get_json()
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return '', 200
    return 'Bad request', 400

def configure_webhook():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –î–ª—è Render.com
        if os.environ.get('RENDER'):
            external_url = os.environ.get('RENDER_EXTERNAL_URL')
            if external_url:
                webhook_url = f"{external_url}/webhook"
                bot.remove_webhook()
                bot.set_webhook(url=webhook_url)
                logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                return
            else:
                logger.warning("RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º/–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        bot.remove_webhook()
        logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
configure_webhook()

if __name__ == '__main__':
    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
    logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
    bot.remove_webhook()
    bot.infinity_polling()
