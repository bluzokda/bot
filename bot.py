import logging
from telegram import Update
from telegram.ext import (
    Application, 
    ContextTypes, 
    MessageHandler, 
    filters,
    CommandHandler
)
import os
import asyncio
from PIL import Image
import pytesseract
import io
import re
import requests
from concurrent.futures import ThreadPoolExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "https://api-inference.huggingface.co/models/deepset/roberta-base-squad2"
HF_TOKEN = os.getenv("HF_TOKEN")
HEADERS = {"Authorization": f"Bearer {HF_TOKEN}"} if HF_TOKEN else {}
OCR_CONFIG = r'--oem 3 --psm 6 -c preserve_interword_spaces=1'

# –ö—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_context = {}
executor = ThreadPoolExecutor(max_workers=4)

def sync_image_to_text(image_bytes: bytes) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        image = Image.open(io.BytesIO(image_bytes))
        
        # –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if image.width > 1000 or image.height > 1000:
            new_width = 1000
            new_height = int(new_width * image.height / image.width)
            image = image.resize((new_width, new_height), Image.LANCZOS)
            
        image = image.convert('L')  # Grayscale
        image = image.point(lambda x: 0 if x < 140 else 255)  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        
        text = pytesseract.image_to_string(
            image,
            lang='rus+eng',
            config=OCR_CONFIG
        )
        return re.sub(r'\s+', ' ', text).strip() or "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç."
    except Exception as e:
        logger.exception("OCR error")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

async def image_to_text(image_bytes: bytes) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Tesseract OCR"""
    try:
        loop = asyncio.get_running_loop()
        text = await loop.run_in_executor(
            executor,
            sync_image_to_text,
            image_bytes
        )
        return text
    except Exception as e:
        logger.error(f"OCR error: {e}")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."

async def get_answer(question: str, context: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Hugging Face API"""
    if not HF_TOKEN:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞: API —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    payload = {
        "inputs": {
            "question": question,
            "context": context[:5000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        }
    }
    
    try:
        response = requests.post(API_URL, headers=HEADERS, json=payload, timeout=20)
        
        if response.status_code == 200:
            result = response.json()
            return result.get('answer', '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
            
        elif response.status_code == 503:
            retry_after = int(response.headers.get('Retry-After', 30))
            return f"üöß –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫—É–Ω–¥"
            
        else:
            logger.error(f"API error {response.status_code}: {response.text[:200]}")
            return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}"
            
    except requests.exceptions.Timeout:
        return "‚åõ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"
    except Exception as e:
        logger.exception("HF request exception")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
    user = update.effective_user
    user_id = user.id if user else None
    
    if not user_id:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id")
        return
        
    msg = update.message
    
    try:
        await msg.reply_chat_action(action="typing")
        photo_file = await msg.photo[-1].get_file()
        image_bytes = await photo_file.download_as_bytearray()
        
        text = await image_to_text(image_bytes)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        if "–Ω–µ —É–¥–∞–ª–æ—Å—å" in text.lower() or "–æ—à–∏–±–∫–∞" in text.lower() or len(text) < 10:
            await msg.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
            
        user_context[user_id] = text
        logger.info(f"Saved context for user {user_id}: {text[:50]}...")
        response = f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É"
        await msg.reply_text(response)
    except Exception as e:
        logger.exception("Photo processing error")
        await msg.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    user_id = user.id if user else None
    
    if not user_id:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id")
        return
        
    msg = update.message
    user_text = msg.text.strip() if msg.text else ""
    
    if not user_text:
        return
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞
    if user_text.lower() in ['/start', '/clear', '/new']:
        if user_id in user_context:
            del user_context[user_id]
            logger.info(f"Context cleared for user {user_id}")
        await msg.reply_text("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
    if user_text.lower() in ['/help', '–ø–æ–º–æ—â—å']:
        help_text = (
            "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º (—Ç–µ—Å—Ç, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –∏ —Ç.–¥.), –∞ –∑–∞—Ç–µ–º –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –Ω–µ–º—É.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start, /new, /clear - –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—Å—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ö–∞–∫–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 5?\n"
            "‚Ä¢ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 3\n"
            "‚Ä¢ –ß—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –ø—É–Ω–∫—Ç–µ 2.1?"
        )
        await msg.reply_text(help_text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if user_id not in user_context:
        logger.warning(f"Context not found for user {user_id}")
        await msg.reply_text(
            "‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é."
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    context_text = user_context.get(user_id, "")
    if not context_text:
        await msg.reply_text("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
        
    await msg.reply_chat_action(action="typing")
    status_msg = await msg.reply_text("üîç –ò—â—É –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    
    try:
        answer = await get_answer(user_text, context_text)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = f"‚ùì *–í–æ–ø—Ä–æ—Å:* {user_text}\n\nüí° *–û—Ç–≤–µ—Ç:* {answer}\n\n"
        response += "–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /new"
        
        await status_msg.edit_text(response, parse_mode="Markdown")
    except Exception as e:
        logger.exception("Error processing question")
        await status_msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º (—Ç–µ—Å—Ç, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –∏ —Ç.–¥.), "
        "–∞ –∑–∞—Ç–µ–º –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    # –ü—É—Ç—å –∫ Tesseract
    pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
    
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", handle_text))
    application.add_handler(CommandHandler("new", handle_text))
    application.add_handler(CommandHandler("clear", handle_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ —Ç–µ–∫—Å—Ç–µ
    application.add_handler(MessageHandler(filters.COMMAND, handle_text))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.exception("–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π")
        raise
