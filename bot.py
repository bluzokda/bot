import os
import telebot
import requests
import logging
import pytesseract
from PIL import Image, ImageEnhance, ImageOps, ImageFilter
import io
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import threading
import re
import time
import json
from urllib.parse import quote_plus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEY = os.environ.get('OPENROUTER_API_KEY') # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = telebot.TeleBot(BOT_TOKEN)
logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Tesseract
try:
    tesseract_version = pytesseract.get_tesseract_version()
    logger.info(f"Tesseract version: {tesseract_version}")
except Exception as e:
    logger.error(f"Tesseract check failed: {str(e)}")
    raise

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "Upgrade-Insecure-Requests": "1",
    "Sec-Fetch-Dest": "document",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Site": "none",
    "Cache-Control": "max-age=0"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter
OPENROUTER_HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": os.environ.get('RENDER_EXTERNAL_URL', 'https://your-bot-url.onrender.com'), # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    "X-Title": "StudyBot",
    "Content-Type": "application/json"
}


# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
user_history = {}

def create_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton('üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'))
    markup.add(KeyboardButton('üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'), KeyboardButton('üìö –ò—Å—Ç–æ—Ä–∏—è'))
    markup.add(KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å'))
    return markup

# --- –§–£–ù–ö–¶–ò–ò –ü–û–ò–°–ö–ê (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤) ---
def search_brave(query):
    """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Brave Search API (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)"""
    # ... (–æ—Å—Ç–∞–≤—å –∫–æ–¥ search_brave –∫–∞–∫ –µ—Å—Ç—å) ...
    pass # –ó–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥

def search_searx(query):
    """–ó–∞–ø–∞—Å–Ω–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Searx (–µ—Å–ª–∏ Brave –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"""
    # ... (–æ—Å—Ç–∞–≤—å –∫–æ–¥ search_searx –∫–∞–∫ –µ—Å—Ç—å) ...
    pass # –ó–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê –° –ò–ò ---
def search_internet_with_ai(query):
    """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ò–ò: {query}")

        # 1. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
        search_results = None
        logger.info("–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...")
        # –ü—Ä–æ–±—É–µ–º Brave Search (–æ—Å–Ω–æ–≤–Ω–æ–π)
        if 'search_brave' in globals():
             results = search_brave(query)
             if results and len(results) > 0:
                 search_results = results
                 logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç Brave Search")
        # –ï—Å–ª–∏ Brave –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Searx (—Ä–µ–∑–µ—Ä–≤)
        if not search_results and 'search_searx' in globals():
             results = search_searx(query)
             if results and len(results) > 0:
                 search_results = results
                 logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç Searx")

        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        context_text = ""
        if search_results:
             context_text = "\n\n".join([f"–ò—Å—Ç–æ—á–Ω–∏–∫: {res['title']}\n{res['snippet']}" for res in search_results[:3]])
             logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω ({len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
             logger.warning("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
             context_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."

        # 3. –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å –≤ OpenRouter
        if not OPENROUTER_API_KEY:
             logger.error("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
             # –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
             if search_results:
                 return search_results
             else:
                 return [{"title": "–û—à–∏–±–∫–∞ –ò–ò", "url": "#", "snippet": "–ö–ª—é—á OpenRouter –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."}]

        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenRouter...")

        payload = {
            "model": "openai/gpt-3.5-turbo", # –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, "mistralai/mistral-7b-instruct"
            "messages": [
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤. "
                        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. "
                        "–û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ, –ø–æ –¥–µ–ª—É –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                        "–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º."
                    )
                },
                {
                    "role": "user",
                    "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_text}\n\n–í–æ–ø—Ä–æ—Å: {query}"
                }
            ],
            "temperature": 0.7,
            "max_tokens": 500
        }

        try:
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=OPENROUTER_HEADERS,
                json=payload,
                timeout=30 # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ò–ò
            )
            response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏

            data = response.json()
            ai_answer = data['choices'][0]['message']['content'].strip()

            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç OpenRouter –ø–æ–ª—É—á–µ–Ω ({len(ai_answer)} —Å–∏–º–≤–æ–ª–æ–≤)")

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∏—Å–∫–∞
            ai_result = {
                "title": "ü§ñ –û—Ç–≤–µ—Ç –æ—Ç –ò–ò (–Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)",
                "url": "#",
                "snippet": ai_answer
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
            final_results = [ai_result]
            if search_results:
                final_results.extend(search_results[:2]) # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º 2 –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

            return final_results

        except requests.exceptions.Timeout:
            logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter")
            error_result = {"title": "–û—à–∏–±–∫–∞ –ò–ò", "url": "#", "snippet": "–¢–∞–π–º–∞—É—Ç: –ó–∞–ø—Ä–æ—Å –∫ –ò–ò –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."}
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –ò–ò + –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            return [error_result] + (search_results[:3] if search_results else [])
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter: {e}")
            error_result = {"title": "–û—à–∏–±–∫–∞ –ò–ò", "url": "#", "snippet": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
            return [error_result] + (search_results[:3] if search_results else [])
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenRouter: {e}. –û—Ç–≤–µ—Ç: {data}")
            error_result = {"title": "–û—à–∏–±–∫–∞ –ò–ò", "url": "#", "snippet": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
            return [error_result] + (search_results[:3] if search_results else [])
        except Exception as e:
            logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenRouter")
            error_result = {"title": "–û—à–∏–±–∫–∞ –ò–ò", "url": "#", "snippet": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
            return [error_result] + (search_results[:3] if search_results else [])

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ search_internet_with_ai")
        # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤ —Å–∞–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if 'search_results' in locals() and search_results:
            search_results.insert(0, {"title": "–û—à–∏–±–∫–∞ –ò–ò", "url": "#", "snippet": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ò–ò: {str(e)}. –ü–æ–∫–∞–∑–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞."})
            return search_results
        else:
            return [{"title": "–û—à–∏–±–∫–∞", "url": "#", "snippet": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"}]


# --- –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –ò –°–û–û–ë–©–ï–ù–ò–ô (–æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤ search_internet) ---
def save_history(user_id, question, response):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # ... (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å) ...

def process_image(image_data):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    # ... (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å) ...

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    # ... (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å) ...

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def handle_help(message):
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text == 'üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
def handle_ask_question(message):
    # ... (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å) ...

@bot.message_handler(func=lambda message: message.text == 'üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ')
def handle_ask_photo(message):
    # ... (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å) ...

def process_text_question(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò"""
    try:
        chat_id = message.chat.id
        question = message.text
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç {chat_id}: {question}")

        if len(question) < 3:
            bot.send_message(chat_id, "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.", reply_markup=create_menu())
            return

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        bot.send_chat_action(chat_id, 'typing')

        # –ò—â–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
        search_results = search_internet_with_ai(question)

        if not search_results or (len(search_results) == 1 and search_results[0]['title'] in ["–ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è", "–û—à–∏–±–∫–∞"]):
            bot.send_message(
                chat_id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
                reply_markup=create_menu()
            )
            return

        response_text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        for i, res in enumerate(search_results[:3], 1):  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            title = res['title'] if len(res['title']) < 100 else res['title'][:97] + "..."
            response_text += f"<b>{i}. {title}</b>\n"
            response_text += f"<i>{res['snippet']}</i>\n"
            if res['url'] != "#" and res['url']:
                response_text += f"<a href='{res['url']}'>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
            else:
                response_text += "\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_history(chat_id, question, response_text)

        bot.send_message(
            chat_id=chat_id,
            text=response_text,
            parse_mode='HTML',
            disable_web_page_preview=True,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            reply_markup=create_menu()
        )
        logger.info("–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_text_question: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=create_menu())


def process_photo_question(chat_id, text):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Å —Ñ–æ—Ç–æ, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò"""
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ—Ç–æ –æ—Ç {chat_id}: {text[:50]}...")

        if len(text) < 10:
            bot.send_message(chat_id, "‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=create_menu())
            return

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        bot.send_chat_action(chat_id, 'typing')

        # –ò—â–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–ø—Ä–æ—Å
        search_results = search_internet_with_ai(text)

        if not search_results or (len(search_results) == 1 and search_results[0]['title'] in ["–ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è", "–û—à–∏–±–∫–∞"]):
             bot.send_message(
                 chat_id,
                 "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é.",
                 reply_markup=create_menu()
             )
             return

        response_text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É:\n\n"
        for i, res in enumerate(search_results[:3], 1):  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            title = res['title'] if len(res['title']) < 100 else res['title'][:97] + "..."
            response_text += f"<b>{i}. {title}</b>\n"
            response_text += f"<i>{res['snippet']}</i>\n"
            if res['url'] != "#" and res['url']:
                response_text += f"<a href='{res['url']}'>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n"
            else:
                response_text += "\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_history(chat_id, f"–§–æ—Ç–æ: {text[:50]}...", response_text)

        bot.send_message(
            chat_id=chat_id,
            text=response_text,
            parse_mode='HTML',
            disable_web_page_preview=True,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            reply_markup=create_menu()
        )
        logger.info("–û—Ç–≤–µ—Ç –ø–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_photo_question: {str(e)}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ñ–æ—Ç–æ.", reply_markup=create_menu())


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ: —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–≥–æ –≤ –ò–ò"""
     try:
         chat_id = message.chat.id
         logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {chat_id}")
         # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
         file_id = message.photo[-1].file_id
         file_info = bot.get_file(file_id)
         file_data = bot.download_file(file_info.file_path)
         bot.send_message(chat_id, "üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
         bot.send_chat_action(chat_id, 'typing')
         # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
         start_time = time.time()
         text = process_image(file_data)
         elapsed_time = time.time() - start_time
         logger.info(f"OCR –∑–∞–Ω—è–ª {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
         if not text or len(text) < 10:
             bot.send_message(
                 chat_id,
                 "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –£–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ\n‚Ä¢ –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ\n‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥ –ø—Ä—è–º—ã–º —É–≥–ª–æ–º\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                 reply_markup=create_menu()
             )
             return
         # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
         display_text = text[:300] + "..." if len(text) > 300 else text
         bot.send_message(
             chat_id,
             f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<code>{display_text}</code>",
             parse_mode='HTML',
             reply_markup=create_menu()
         )
         # –ò—â–µ–º –æ—Ç–≤–µ—Ç –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É —Å –ø–æ–º–æ—â—å—é –ò–ò
         bot.send_message(chat_id, "üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò...")
         process_photo_question(chat_id, text) # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

     except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
         bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=create_menu())


@bot.message_handler(func=lambda message: message.text == 'üìö –ò—Å—Ç–æ—Ä–∏—è')
def handle_history(message):
    # ... (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å) ...

@app.route('/')
def home():
    return "ü§ñ Telegram Study Bot –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram"

@app.route('/health')
def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return "OK", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    # ... (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å) ...

def configure_webhook():
    # ... (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å) ...

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
configure_webhook()

# –î–ª—è Docker - –∑–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
