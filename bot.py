from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    JobQueue,
    CallbackContext
)
import os
import sqlite3
import httpx
import requests
from bs4 import BeautifulSoup
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS tasks
                 (user_id INTEGER, task TEXT, completed INTEGER DEFAULT 0)''')
    conn.commit()
    conn.close()

init_db()

# === –§—É–Ω–∫—Ü–∏–∏ To-do List ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–∫–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                                    "/add [–∑–∞–¥–∞—á–∞] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                                    "/list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
                                    "/done [–Ω–æ–º–µ—Ä] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
                                    "/remind —á–µ—Ä–µ–∑ [X] –º–∏–Ω—É—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ] ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                                    "/weather [–≥–æ—Ä–æ–¥] ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
                                    "/search [–∑–∞–ø—Ä–æ—Å] ‚Äî –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")


async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = " ".join(context.args)
    if not task:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
        return

    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("INSERT INTO tasks (user_id, task) VALUES (?, ?)", (user_id, task))
    conn.commit()
    conn.close()
    
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {task}")


async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()
    c.execute("SELECT rowid, task FROM tasks WHERE user_id = ? AND completed = 0", (user_id,))
    tasks = c.fetchall()
    conn.close()

    if not tasks:
        await update.message.reply_text("üéâ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!")
        return

    task_list = "\n".join([f"{task[0]}. {task[1]}" for task in tasks])
    await update.message.reply_text("üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n" + task_list)


async def done_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /done")
        return

    try:
        task_id = int(context.args[0])
        
        conn = sqlite3.connect('tasks.db')
        c = conn.cursor()
        c.execute("SELECT task FROM tasks WHERE rowid = ? AND user_id = ?", (task_id, user_id))
        task = c.fetchone()
        
        if task:
            c.execute("UPDATE tasks SET completed = 1 WHERE rowid = ?", (task_id,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task[0]}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        conn.close()
    except ValueError:
        await update.message.reply_text("üî¢ –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (—Ü–∏—Ñ—Ä—É)")

# === –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ / Reminder ===
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 4 or args[0] != "—á–µ—Ä–µ–∑" or args[2] != "–º–∏–Ω—É—Ç":
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n/remind —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
        return

    try:
        minutes = int(args[1])
        message = " ".join(args[3:])
    except ValueError:
        await update.message.reply_text("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if not message:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ JobQueue
    job_queue = context.job_queue
    chat_id = update.effective_message.chat_id
    
    job_queue.run_once(
        callback=reminder_callback, 
        when=minutes * 60, 
        data=message,
        chat_id=chat_id,
        name=str(chat_id)
    
    await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ß–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω—é: '{message}'")


async def reminder_callback(context: CallbackContext):
    job = context.job
    await context.bot.send_message(chat_id=job.chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.data}")

# === –ü–æ–≥–æ–¥–∞ / Weather ===
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather\n–ù–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
        return

    city = " ".join(context.args)
    url = f"https://api.weatherapi.com/v1/current.json?key={os.getenv('WEATHER_API_KEY')}&q={city}&lang=ru"

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url)
            data = response.json()

            if "error" in data:
                error_msg = data['error']['message']
                await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {error_msg}")
                return

            location = data["location"]["name"]
            temp_c = data["current"]["temp_c"]
            condition = data["current"]["condition"]["text"]
            wind_kph = data["current"]["wind_kph"]
            humidity = data["current"]["humidity"]
            feelslike_c = data["current"]["feelslike_c"]

            reply = (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {location}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feelslike_c}¬∞C)\n"
                f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n"
                f"üí® –í–µ—Ç–µ—Ä: {wind_kph} –∫–º/—á\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%"
            )
            await update.message.reply_text(reply)

        except Exception as e:
            logger.error(f"Weather error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Google ===
def search_google(query):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0 Safari/537.36"
    }
    url = f"https://www.google.com/search?q={requests.utils.quote(query)}"
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        results = []

        # –ò—â–µ–º –±–ª–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ 
        for result in soup.find_all('div', class_='tF2Cxc'):  # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            title_element = result.find('h3')
            link_element = result.find('a')
            snippet_element = result.find('div', class_='VwiC3b')
            
            if title_element and link_element:
                title = title_element.text
                link = link_element['href']
                snippet = snippet_element.text if snippet_element else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                results.append({
                    "title": title,
                    "link": link,
                    "snippet": snippet[:200] + "..." if len(snippet) > 200 else snippet
                })
                
                if len(results) >= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                    break

        return results
    except Exception as e:
        logger.error(f"Search error: {e}")
        return []

# === –ö–æ–º–∞–Ω–¥–∞ /search ===
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("üîç –ò—Å–ø–æ–ª—å–∑—É–π: /search [–∑–∞–ø—Ä–æ—Å]\n–ü—Ä–∏–º–µ—Ä—ã:\n"
                                        "/search roblox —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–Ω–∫\n"
                                        "/search minecraft –∫–∞–∫ –Ω–∞–π—Ç–∏ –∫—Ä–µ–ø–æ—Å—Ç—å")
        return

    query = " ".join(context.args)
    await update.message.reply_text(f"üîé –ò—â—É: {query}...")

    try:
        results = search_google(query)

        if not results:
            await update.message.reply_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å")
            return

        reply = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª:\n\n"
        for i, res in enumerate(results, start=1):
            reply += f"{i}. <b>{res['title']}</b>\n"
            reply += f"{res['snippet']}\n"
            reply += f"<a href='{res['link']}'>–û—Ç–∫—Ä—ã—Ç—å</a>\n\n"

        await update.message.reply_text(reply, parse_mode='HTML', disable_web_page_preview=True)

    except Exception as e:
        logger.error(f"Search command error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    if update and hasattr(update, 'message'):
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ === 
async def post_init(application):
    # –û—á–∏—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await application.bot.delete_webhook(drop_pending_updates=True)
    logger.info("–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    app = ApplicationBuilder() \
        .token(TOKEN) \
        .post_init(post_init) \
        .build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_task))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(CommandHandler("done", done_task))
    app.add_handler(CommandHandler("remind", remind))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("search", search_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
