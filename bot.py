from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os
import asyncio
import httpx

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_tasks = {}  # {user_id: [—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á]}

# === –§—É–Ω–∫—Ü–∏–∏ To-do List ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–æ—Ä–≥–∞–Ω–∞–π–∑–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                                    "/add [–∑–∞–¥–∞—á–∞] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                                    "/list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
                                    "/done [–Ω–æ–º–µ—Ä] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
                                    "/remind —á–µ—Ä–µ–∑ [X] –º–∏–Ω—É—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ] ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                                    "/weather [–≥–æ—Ä–æ–¥] ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É")


async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    task = " ".join(context.args)
    if not task:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
        return

    if user_id not in user_tasks:
        user_tasks[user_id] = []

    user_tasks[user_id].append(task)
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {task}")


async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = user_tasks.get(user_id, [])

    if not tasks:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return

    task_list = "\n".join([f"{i+1}. {task}" for i, task in enumerate(tasks)])
    await update.message.reply_text("–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n" + task_list)


async def done_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tasks = user_tasks.get(user_id, [])

    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /done")
        return

    try:
        index = int(context.args[0]) - 1
        task = tasks.pop(index)
        await update.message.reply_text(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task}")
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")


# === –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ / Reminder ===
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if len(args) < 4 or args[0] != "—á–µ—Ä–µ–∑" or args[2] != "–º–∏–Ω—É—Ç":
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n/remind —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
        return

    try:
        minutes = int(args[1])
        message = " ".join(args[3:])
    except ValueError:
        await update.message.reply_text("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if not message:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return

    await update.message.reply_text(f"–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç: '{message}'")

    # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(reminder_task(update.effective_user.id, minutes, message, context))


async def reminder_task(user_id, minutes, message, context):
    await asyncio.sleep(minutes * 60)
    await context.bot.send_message(chat_id=user_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")


# === –ü–æ–≥–æ–¥–∞ / Weather ===
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")  # –ë–µ—Ä—ë–º –∏–∑ .env –∏–ª–∏ Render


async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather")
        return

    city = " ".join(context.args)
    url = f"https://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}"

    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url)
            data = response.json()

            if "error" in data:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥.")
                return

            temp_c = data["current"]["temp_c"]
            condition = data["current"]["condition"][0]["text"]
            wind_kph = data["current"]["wind_kph"]
            humidity = data["current"]["humidity"]

            reply = (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n"
                f"–í–µ—Ç–µ—Ä: {wind_kph} –∫–º/—á\n"
                f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%"
            )
            await update.message.reply_text(reply)

        except Exception as e:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")
            print(e)


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ === 
app = ApplicationBuilder().token(TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add", add_task))
app.add_handler(CommandHandler("list", list_tasks))
app.add_handler(CommandHandler("done", done_task))
app.add_handler(CommandHandler("remind", remind))
app.add_handler(CommandHandler("weather", weather))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
