from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os
import asyncio
import httpx
import requests
import time
import csv
from datetime import datetime
import logging

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = int(os.getenv("TELEGRAM_ADMIN_ID", 0))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
USERS_FILE = "bot_users.csv"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_tasks = {}  # {user_id: [—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á]}

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
def init_users_file():
    try:
        if not os.path.exists(USERS_FILE):
            logger.info("–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            with open(USERS_FILE, "w", encoding="utf-8", newline="") as f:
                writer = csv.writer(f)
                writer.writerow(["user_id", "first_name", "last_name", "username", "first_seen"])
        else:
            logger.info("–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def register_user(user):
    try:
        user_exists = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                reader = csv.reader(f)
                try:
                    next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                except StopIteration:
                    pass
                
                for row in reader:
                    if row and row[0].isdigit() and int(row[0]) == user.id:
                        user_exists = True
                        break
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_exists:
            with open(USERS_FILE, "a", encoding="utf-8", newline="") as f:
                writer = csv.writer(f)
                writer.writerow([
                    user.id,
                    user.first_name,
                    user.last_name or "",
                    user.username or "",
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                ])
            logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
            return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ===
async def notify_admin(context, user, is_new=False):
    try:
        if ADMIN_ID:
            message = "üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!" if is_new else "üë§ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥"
            text = (
                f"{message}\n\n"
                f"ID: {user.id}\n"
                f"–ò–º—è: {user.first_name}\n"
                f"–§–∞–º–∏–ª–∏—è: {user.last_name or '-'}\n"
                f"Username: @{user.username or '-'}\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            )
            await context.bot.send_message(chat_id=ADMIN_ID, text=text)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {ADMIN_ID}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /admin –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        if os.path.exists(USERS_FILE):
            await update.message.reply_document(
                document=open(USERS_FILE, "rb"),
                filename="bot_users.csv",
                caption="üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"
            )
            logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMIN_ID} –∑–∞–ø—Ä–æ—Å–∏–ª —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        else:
            await update.message.reply_text("–§–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.warning("–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

# === –§—É–Ω–∫—Ü–∏–∏ To-do List ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        is_new = register_user(user)
        await notify_admin(context, user, is_new)
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–∫–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                                        "/add [–∑–∞–¥–∞—á–∞] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                                        "/list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
                                        "/done [–Ω–æ–º–µ—Ä] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
                                        "/remind —á–µ—Ä–µ–∑ [X] –º–∏–Ω—É—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ] ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                                        "/weather [–≥–æ—Ä–æ–¥] ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
                                        "/search [–∑–∞–ø—Ä–æ—Å] ‚Äî –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
                                       
async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        task = " ".join(context.args)
        if not task:
            await update.message.reply_text("–£–∫–∞–∂–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
            return

        if user_id not in user_tasks:
            user_tasks[user_id] = []

        user_tasks[user_id].append(task)
        await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {task}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /add: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")


async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        tasks = user_tasks.get(user_id, [])

        if not tasks:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
            return

        task_list = "\n".join([f"{i+1}. {task}" for i, task in enumerate(tasks)])
        await update.message.reply_text("–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n" + task_list)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /list: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")


async def done_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        tasks = user_tasks.get(user_id, [])

        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /done")
            return

        try:
            index = int(context.args[0]) - 1
            task = tasks.pop(index)
            await update.message.reply_text(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task}")
        except (ValueError, IndexError):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /done: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")


# === –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ / Reminder ===
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 4 or args[0] != "—á–µ—Ä–µ–∑" or args[2] != "–º–∏–Ω—É—Ç":
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n/remind —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
            return

        try:
            minutes = int(args[1])
            message = " ".join(args[3:])
        except ValueError:
            await update.message.reply_text("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        if not message:
            await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return

        await update.message.reply_text(f"–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç: '{message}'")

        # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(reminder_task(update.effective_user.id, minutes, message, context))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /remind: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")


async def reminder_task(user_id, minutes, message, context):
    try:
        await asyncio.sleep(minutes * 60)
        await context.bot.send_message(chat_id=user_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏: {e}")


# === –ü–æ–≥–æ–¥–∞ / Weather ===
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")  # –ë–µ—Ä—ë–º –∏–∑ .env –∏–ª–∏ Render


async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather")
            return

        city = " ".join(context.args)
        url = f"https://api.weatherapi.com/v1/current.json?key={os.getenv('WEATHER_API_KEY')}&q={city}"

        async with httpx.AsyncClient() as client:
            try:
                response = await client.get(url)
                data = response.json()

                if "error" in data:
                    await update.message.reply_text(f"–û—à–∏–±–∫–∞ WeatherAPI: {data['error']['message']}")
                    return

                temp_c = data["current"]["temp_c"]
                condition = data["current"]["condition"]["text"]
                wind_kph = data["current"]["wind_kph"]
                humidity = data["current"]["humidity"]

                reply = (
                    f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C\n"
                    f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n"
                    f"–í–µ—Ç–µ—Ä: {wind_kph} –∫–º/—á\n"
                    f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%"
                )
                await update.message.reply_text(reply)

            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ WeatherAPI: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /weather: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã")


# === –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ DuckDuckGo API ===
def search_duckduckgo(query, max_results=5):
    url = "https://api.duckduckgo.com/"
    params = {
        "q": query,
        "format": "json",
        "no_redirect": 1,
        "no_html": 1,
        "skip_disambig": 1
    }
    
    try:
        response = requests.get(url, params=params, timeout=10)
        data = response.json()
        
        results = []
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if data.get("AbstractText"):
            results.append({
                "title": data.get("Heading", "–û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"),
                "snippet": data.get("AbstractText", ""),
                "link": data.get("AbstractURL", "")
            })
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, topic in enumerate(data.get("RelatedTopics", [])):
            if "Result" in topic:
                result = topic["Result"]
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–∞—Ä—Å–∏–Ω–≥)
                parts = result.split('">')
                if len(parts) > 1:
                    title = parts[1].split("</a>")[0].strip()
                    snippet = parts[2].split("</a>")[0].strip() if len(parts) > 2 else ""
                    link = parts[0].split('href="')[1].strip()
                    
                    results.append({
                        "title": title,
                        "snippet": snippet,
                        "link": link
                    })
            
            if len(results) >= max_results:
                break
        
        return results
    
    except Exception as e:
        logger.error(f"DuckDuckGo search error: {e}")
        return []

# === –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /search ===
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /search [–∑–∞–ø—Ä–æ—Å]. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                                            "/search game 123\n"
                                            "/search game 123")
            return

        query = " ".join(context.args)
        await update.message.reply_text(f"üîç –ò—â—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {query}...")

        try:
            results = search_duckduckgo(query)

            if not results:
                await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                return

            reply = f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª:\n\n"
            for i, res in enumerate(results, start=1):
                title = res.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                snippet = res.get('snippet', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')
                link = res.get('link', '')
                
                if link:
                    reply += f"{i}. <b>{title}</b>\n"
                    reply += f"{snippet}\n"
                    reply += f"<a href='{link}'>–û—Ç–∫—Ä—ã—Ç—å</a>\n\n"
                else:
                    reply += f"{i}. <b>{title}</b>\n{snippet}\n\n"

            await update.message.reply_text(reply, parse_mode='HTML', disable_web_page_preview=True)

        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /search: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞")

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ID ===
async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        await update.message.reply_text(
            f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"ID: {user.id}\n"
            f"–ò–º—è: {user.first_name}\n"
            f"–§–∞–º–∏–ª–∏—è: {user.last_name or '-'}\n"
            f"Username: @{user.username or '-'}\n\n"
            f"ADMIN_ID: {ADMIN_ID}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /myid: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ ===
async def check_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        exists = os.path.exists(USERS_FILE)
        size = os.path.getsize(USERS_FILE) if exists else 0
        await update.message.reply_text(
            f"–§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'}\n"
            f"–†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç"
        )
        
        if exists:
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                content = f.read(1000)
            await update.message.reply_text(f"–ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤:\n{content}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ === 
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    init_users_file()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_task))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(CommandHandler("done", done_task))
    app.add_handler(CommandHandler("remind", remind))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("search", search_command))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CommandHandler("myid", myid))  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ID
    app.add_handler(CommandHandler("checkfile", check_file))  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
