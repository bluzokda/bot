import logging
import os
import sys
import sqlite3
import httpx
import requests
import asyncio
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)
logger.info("=== –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û ===")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

if not TOKEN:
    logger.critical("–¢–û–ö–ï–ù –ë–û–¢–ê –ù–ï –ù–ê–ô–î–ï–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
    sys.exit(1)

logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    try:
        conn = sqlite3.connect('tasks.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS tasks
                     (user_id INTEGER, task TEXT, completed INTEGER DEFAULT 0)''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    finally:
        if conn:
            conn.close()

init_db()

# === –§—É–Ω–∫—Ü–∏–∏ To-do List ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç {update.effective_user.id}")
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–∫–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
                                       "/add [–∑–∞–¥–∞—á–∞] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
                                       "/list ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
                                       "/done [–Ω–æ–º–µ—Ä] ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
                                       "/remind —á–µ—Ä–µ–∑ [X] –º–∏–Ω—É—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ] ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
                                       "/weather [–≥–æ—Ä–æ–¥] ‚Äî —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É\n"
                                       "/search [–∑–∞–ø—Ä–æ—Å] ‚Äî –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = None
    try:
        user_id = update.effective_user.id
        task = " ".join(context.args)
        if not task:
            await update.message.reply_text("–£–∫–∞–∂–∏ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
            return

        conn = sqlite3.connect('tasks.db')
        c = conn.cursor()
        c.execute("INSERT INTO tasks (user_id, task) VALUES (?, ?)", (user_id, task))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {task}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_task: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    finally:
        if conn:
            conn.close()

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = None
    try:
        user_id = update.effective_user.id
        conn = sqlite3.connect('tasks.db')
        c = conn.cursor()
        c.execute("SELECT rowid, task FROM tasks WHERE user_id = ? AND completed = 0", (user_id,))
        tasks = c.fetchall()

        if not tasks:
            await update.message.reply_text("üéâ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!")
            return

        task_list = "\n".join([f"{task[0]}. {task[1]}" for task in tasks])
        await update.message.reply_text("üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n" + task_list)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_tasks: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")
    finally:
        if conn:
            conn.close()

async def done_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = None
    try:
        user_id = update.effective_user.id
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /done")
            return

        task_id = int(context.args[0])
        conn = sqlite3.connect('tasks.db')
        c = conn.cursor()
        c.execute("SELECT task FROM tasks WHERE rowid = ? AND user_id = ?", (task_id, user_id))
        task = c.fetchone()
        
        if task:
            c.execute("UPDATE tasks SET completed = 1 WHERE rowid = ?", (task_id,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task[0]}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except ValueError:
        await update.message.reply_text("üî¢ –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (—Ü–∏—Ñ—Ä—É)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ done_task: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
    finally:
        if conn:
            conn.close()

# === –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ / Reminder ===
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 4 or args[0] != "—á–µ—Ä–µ–∑" or args[2] != "–º–∏–Ω—É—Ç":
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç:\n/remind —á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
            return

        minutes = int(args[1])
        message = " ".join(args[3:])

        if not message:
            await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            return

        job_queue = context.job_queue
        chat_id = update.effective_message.chat_id
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–û–ö–ê: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
        job_queue.run_once(
            callback=reminder_callback, 
            when=minutes * 60, 
            data=message,
            chat_id=chat_id,
            name=str(chat_id))
        
        await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ß–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω—é: '{message}'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remind: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

async def reminder_callback(context: CallbackContext):
    try:
        job = context.job
        await context.bot.send_message(chat_id=job.chat_id, text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job.data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reminder_callback: {e}")

# === –ü–æ–≥–æ–¥–∞ / Weather ===
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /weather\n–ù–∞–ø—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞")
            return

        city = " ".join(context.args)
        url = f"https://api.weatherapi.com/v1/current.json?key={os.getenv('WEATHER_API_KEY')}&q={city}&lang=ru"

        async with httpx.AsyncClient() as client:
            response = await client.get(url)
            data = response.json()

            if "error" in data:
                error_msg = data['error']['message']
                await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {error_msg}")
                return

            location = data["location"]["name"]
            temp_c = data["current"]["temp_c"]
            condition = data["current"]["condition"]["text"]
            wind_kph = data["current"]["wind_kph"]
            humidity = data["current"]["humidity"]
            feelslike_c = data["current"]["feelslike_c"]

            reply = (
                f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {location}:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_c}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feelslike_c}¬∞C)\n"
                f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}\n"
                f"üí® –í–µ—Ç–µ—Ä: {wind_kph} –∫–º/—á\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%"
            )
            await update.message.reply_text(reply)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ weather: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Google ===
def search_google(query):
    try:
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0 Safari/537.36"
        }
        url = f"https://www.google.com/search?q={requests.utils.quote(query)}"
        
        response = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(response.text, 'html.parser')
        results = []

        for result in soup.find_all('div', class_='tF2Cxc'):
            title_element = result.find('h3')
            link_element = result.find('a')
            snippet_element = result.find('div', class_='VwiC3b')
            
            if title_element and link_element:
                title = title_element.text
                link = link_element['href']
                snippet = snippet_element.text if snippet_element else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                results.append({
                    "title": title,
                    "link": link,
                    "snippet": snippet[:200] + "..." if len(snippet) > 200 else snippet
                })
                
                if len(results) >= 5:
                    break

        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_google: {e}")
        return []

# === –ö–æ–º–∞–Ω–¥–∞ /search ===
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not context.args:
            await update.message.reply_text("üîç –ò—Å–ø–æ–ª—å–∑—É–π: /search [–∑–∞–ø—Ä–æ—Å]\n–ü—Ä–∏–º–µ—Ä—ã:\n"
                                            "/search roblox —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–Ω–∫\n"
                                            "/search minecraft –∫–∞–∫ –Ω–∞–π—Ç–∏ –∫—Ä–µ–ø–æ—Å—Ç—å")
            return

        query = " ".join(context.args)
        await update.message.reply_text(f"üîé –ò—â—É: {query}...")

        results = search_google(query)

        if not results:
            await update.message.reply_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å")
            return

        reply = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª:\n\n"
        for i, res in enumerate(results, start=1):
            reply += f"{i}. <b>{res['title']}</b>\n"
            reply += f"{res['snippet']}\n"
            reply += f"<a href='{res['link']}'>–û—Ç–∫—Ä—ã—Ç—å</a>\n\n"

        await update.message.reply_text(reply, parse_mode='HTML', disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ search_command: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
        if update and hasattr(update, 'message'):
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ === 
async def post_init(application):
    try:
        await application.bot.delete_webhook(drop_pending_updates=True)
        logger.info("–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
        
        me = await application.bot.get_me()
        logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω: @{me.username} (ID: {me.id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise

def main():
    try:
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ ApplicationBuilder...")
        app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()
        
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("add", add_task))
        app.add_handler(CommandHandler("list", list_tasks))
        app.add_handler(CommandHandler("done", done_task))
        app.add_handler(CommandHandler("remind", remind))
        app.add_handler(CommandHandler("weather", weather))
        app.add_handler(CommandHandler("search", search_command))
        
        logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫...")
        app.add_error_handler(error_handler)
        
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
        app.run_polling()
        
    except Exception as e:
        logger.critical(f"–§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
        sys.exit(1)

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ main()")
    main()
