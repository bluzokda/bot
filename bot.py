import os
import telebot
import requests
from bs4 import BeautifulSoup
from flask import Flask, request

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞
SEARCH_URL = "https://www.google.com/search?q={}&hl=ru"
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"
}

def google_search(query):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Google –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        formatted_query = query.replace(" ", "+")
        response = requests.get(
            SEARCH_URL.format(formatted_query), 
            headers=HEADERS, 
            timeout=10
        )
        response.raise_for_status()
        
        soup = BeautifulSoup(response.text, 'lxml')
        results = []
        
        # –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (Google —á–∞—Å—Ç–æ –º–µ–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
        for block in soup.find_all('div', class_=['tF2Cxc', 'MjjYud', 'g Ww4FFb vt6azd tF2Cxc'])[:3]:
            title_elem = block.find('h3') or block.find('div', role='heading')
            if not title_elem:
                continue
                
            title = title_elem.text
            link_elem = block.find('a', href=True)
            link = link_elem['href'] if link_elem else "#"
            
            snippet_elem = block.find(attrs={'data-sncf': True}) or block.find('div', class_=['VwiC3b', 'yXK7lf'])
            snippet = snippet_elem.text if snippet_elem else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            
            results.append({
                "title": title,
                "url": link,
                "snippet": snippet[:300] + "..." if len(snippet) > 300 else snippet  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
            })
            
        return results if results else None
        
    except requests.exceptions.Timeout:
        return [{"title": "‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞", "snippet": "Google –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è", "url": ""}]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "üëã –ü—Ä–∏–≤–µ—Ç! –ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏!\n\n"
                          "–ù–∞–ø—Ä–∏–º–µ—Ä: \n‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –û–û–ü?\n‚Ä¢ –§–æ—Ä–º—É–ª–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã")

@bot.message_handler(func=lambda msg: True)
def handle_message(message):
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        search_results = google_search(message.text)
        
        if not search_results:
            return bot.reply_to(message, "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
        
        response = "üîç –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n"
        for i, res in enumerate(search_results, 1):
            response += f"<b>{i}. {res['title']}</b>\n"
            response += f"<i>{res['snippet']}</i>\n"
            response += f"<a href='{res['url']}'>üîó –ò—Å—Ç–æ—á–Ω–∏–∫</a>\n\n"
        
        bot.send_message(
            chat_id=message.chat.id,
            text=response,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@app.route('/')
def home():
    return "ü§ñ Telegram Search Bot —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ–±–∞–≤—å—Ç–µ /webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."

@app.route('/webhook', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_data = request.get_json()
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return '', 200
    return 'Bad request', 400

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ Render"""
    if os.environ.get('RENDER'):
        external_url = os.environ.get('RENDER_EXTERNAL_URL')
        if external_url:
            webhook_url = f"{external_url}/webhook"
            bot.remove_webhook()
            bot.set_webhook(url=webhook_url)
            print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
        else:
            print("RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    else:
        print("–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –≤–µ–±—Ö—É–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

if __name__ == '__main__':
    setup_webhook()
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
