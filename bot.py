import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
QA_DATABASE = {
    "—Ç–µ–æ—Ä–µ–º–∞ –ø–∏—Ñ–∞–≥–æ—Ä–∞": {
        "answer": "a¬≤ + b¬≤ = c¬≤",
        "source": "https://ru.wikipedia.org/wiki/–¢–µ–æ—Ä–µ–º–∞_–ü–∏—Ñ–∞–≥–æ—Ä–∞"
    },
    "—Ñ–æ—Ä–º—É–ª–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞": {
        "answer": "D = b¬≤ - 4ac",
        "source": "https://ru.wikipedia.org/wiki/–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç"
    },
    "—Å—Ç–æ–ª–∏—Ü–∞ —Ä–æ—Å—Å–∏–∏": {
        "answer": "–ú–æ—Å–∫–≤–∞",
        "source": "https://ru.wikipedia.org/wiki/–ú–æ—Å–∫–≤–∞"
    },
    "—Ñ–æ—Ä–º—É–ª–∞ —ç–π–Ω—à—Ç–µ–π–Ω–∞": {
        "answer": "E = mc¬≤",
        "source": "https://ru.wikipedia.org/wiki/–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å_–º–∞—Å—Å—ã_–∏_—ç–Ω–µ—Ä–≥–∏–∏"
    },
    "–∑–∞–∫–æ–Ω –æ–º–∞": {
        "answer": "I = U/R",
        "source": "https://ru.wikipedia.org/wiki/–ó–∞–∫–æ–Ω_–û–º–∞"
    }
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ö–∏–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å/–∑–∞–¥–∞—á—É, –∞ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º.\n"
        "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
        "- —Ç–µ–æ—Ä–µ–º–∞ –ø–∏—Ñ–∞–≥–æ—Ä–∞\n"
        "- —Ñ–æ—Ä–º—É–ª–∞ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç–∞\n"
        "- —Å—Ç–æ–ª–∏—Ü–∞ —Ä–æ—Å—Å–∏–∏\n"
        "- —Ñ–æ—Ä–º—É–ª–∞ —ç–π–Ω—à—Ç–µ–π–Ω–∞\n"
        "- –∑–∞–∫–æ–Ω –æ–º–∞"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_text = update.message.text.lower().strip()
    
    # –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    response = None
    for question in QA_DATABASE:
        if question in user_text:
            response = QA_DATABASE[question]
            break
    
    if response:
        reply = f"‚úÖ –û—Ç–≤–µ—Ç:\n{response['answer']}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫:\n{response['source']}"
    else:
        reply = "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ."
    
    await update.message.reply_text(reply)

def main() -> None:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '').strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    if not TOKEN or ':' not in TOKEN:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∏—Å–ª–æ:—Å—Ç—Ä–æ–∫–∞'")
        logger.error(f"–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: '{TOKEN}'")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    RENDER_APP_NAME = os.getenv('RENDER_APP_NAME', '').strip()
    if not RENDER_APP_NAME:
        logger.warning("RENDER_APP_NAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º.")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç
    try:
        PORT = int(os.environ.get('PORT', 1000))
    except ValueError:
        PORT = 1000
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PORT, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {PORT}")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        app = ApplicationBuilder().token(TOKEN).build()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    if RENDER_APP_NAME:
        # –†–µ–∂–∏–º –¥–ª—è –æ–±–ª–∞–∫–∞
        webhook_url = f"https://{RENDER_APP_NAME}.onrender.com"
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ –æ–±–ª–∞–∫–µ: {webhook_url}")
        
        try:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
            app.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                webhook_url=webhook_url,
                secret_token='RENDER',
                drop_pending_updates=True
            )
            logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ–±–ª–∞–∫–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
            app.run_polling()
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
        logger.info("–ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (polling)")
        app.run_polling()

if __name__ == '__main__':
    main()
