import os
import telebot
import requests
import logging
import pytesseract
from PIL import Image, ImageEnhance, ImageOps, ImageFilter
import io
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import threading
import re
import time
import json
from urllib.parse import quote_plus
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
OPENROUTER_API_KEY = os.environ.get('OPENROUTER_API_KEY')

if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = telebot.TeleBot(BOT_TOKEN)
logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Tesseract
try:
    tesseract_version = pytesseract.get_tesseract_version()
    logger.info(f"Tesseract version: {tesseract_version}")
except Exception as e:
    logger.error(f"Tesseract check failed: {str(e)}")
    raise

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
    "Accept-Encoding": "gzip, deflate, br",
    "Connection": "keep-alive",
    "Upgrade-Insecure-Requests": "1",
    "Sec-Fetch-Dest": "document",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Site": "none",
    "Cache-Control": "max-age=0"
}

# OpenRouter API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
OPENROUTER_HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": "https://bot-wwg6.onrender.com",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ URL —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
    "X-Title": "Study Bot",
    "Content-Type": "application/json"
}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
user_history = {}

def create_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton('üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'))
    markup.add(KeyboardButton('üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'), KeyboardButton('üìö –ò—Å—Ç–æ—Ä–∏—è'))
    markup.add(KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å'))
    return markup

def search_duckduckgo_html(query):
    """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo HTML (–æ–±—Ö–æ–¥ API) - –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥"""
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –≤ DuckDuckGo HTML: {query}")
        encoded_query = quote_plus(query)
        url = f"https://html.duckduckgo.com/html/?q={encoded_query}&kl=ru-ru"

        response = requests.get(url, headers=HEADERS, timeout=15)
        logger.info(f"DuckDuckGo HTML status: {response.status_code}")

        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            results = []

            # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            result_divs = soup.find_all('div', class_='result')[:5]
            logger.info(f"DuckDuckGo HTML found {len(result_divs)} result divs")

            for div in result_divs:
                try:
                    title_elem = div.find('a', class_='result__a')
                    if title_elem:
                        title = title_elem.get_text(strip=True)
                        url = title_elem.get('href', '#')
                        snippet_elem = div.find('a', class_='result__snippet')
                        snippet = snippet_elem.get_text(strip=True) if snippet_elem else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

                        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        if title and snippet and len(title.strip()) > 3 and len(snippet.strip()) > 5:
                            results.append({
                                "title": title[:150],
                                "url": url,
                                "snippet": snippet[:300]
                            })
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ DuckDuckGo: {str(e)}")
                    continue

            if results:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤ DuckDuckGo HTML: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return results
            else:
                logger.warning("DuckDuckGo HTML –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        else:
            logger.warning(f"DuckDuckGo HTML –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ DuckDuckGo HTML: {str(e)}")
    return None

def get_ai_answer(question, context):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —á–µ—Ä–µ–∑ OpenRouter"""
    if not OPENROUTER_API_KEY:
        logger.warning("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None

    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ OpenRouter: {question}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç-–º–æ–¥–µ–ª–∏
        messages = [
            {
                "role": "system",
                "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á–µ–±–µ. –û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
            },
            {
                "role": "user",
                "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–í–æ–ø—Ä–æ—Å: {question}"
            }
        ]

        payload = {
            "model": "openai/gpt-3.5-turbo",  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 500
        }

        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=OPENROUTER_HEADERS,
            json=payload,
            timeout=30
        )

        logger.info(f"OpenRouter status: {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            answer = data['choices'][0]['message']['content'].strip()
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter: {len(answer)} —Å–∏–º–≤–æ–ª–æ–≤")
            return answer
        else:
            logger.error(f"OpenRouter –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
            return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter: {str(e)}")
        return None

def search_internet(query):
    """–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ DuckDuckGo HTML"""
    try:
        logger.info(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {query}")

        # –ü—Ä–æ–±—É–µ–º DuckDuckGo HTML
        logger.info("–ü—Ä–æ–±—É–µ–º DuckDuckGo HTML...")
        results = search_duckduckgo_html(query)
        if results and len(results) > 0:
            logger.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç DuckDuckGo HTML")
            return results

        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
        return [
            {
                "title": "–ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è",
                "url": "#",
                "snippet": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
            }
        ]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return [
            {
                "title": "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞",
                "url": "#",
                "snippet": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
            }
        ]

def save_history(user_id, question, response):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_history:
        user_history[user_id] = []
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    if len(user_history[user_id]) >= 10:
        user_history[user_id].pop(0)
    user_history[user_id].append({
        "question": question,
        "response": response
    })

def process_image(image_data):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        image = Image.open(io.BytesIO(image_data))
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
        if image.mode != 'L':
            image = image.convert('L')
        # –ê–≤—Ç–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç
        image = ImageOps.autocontrast(image, cutoff=10)
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.5)
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(3.0)
        # –õ–µ–≥–∫–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
        image = image.filter(ImageFilter.GaussianBlur(radius=0.7))
        # –ë–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
        image = ImageOps.autocontrast(image)
        image = image.point(lambda p: 255 if p > 160 else 0)
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if min(image.size) < 1000:
            scale_factor = max(2500 / min(image.size), 2.5)
            new_size = (int(image.width * scale_factor), int(image.height * scale_factor))
            image = image.resize(new_size, Image.LANCZOS)
        # –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–∑–∫–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        enhancer = ImageEnhance.Sharpness(image)
        image = enhancer.enhance(2.0)
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        custom_config = r'--oem 3 --psm 6 -l rus+eng'
        text = pytesseract.image_to_string(image, config=custom_config)
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        text = re.sub(r'\s+', ' ', text).strip()
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(text)}")
        return text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OCR: {str(e)}")
        return None

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç {message.chat.id}")
        response = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–±—ã!\n"
            "–Ø —É–º–µ—é:\n"
            "‚Ä¢ –ò—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Å –ò–ò!)\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏\n"
            "üìå –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
            "1. –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ç–∫–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑?')\n"
            "2. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
            "3. –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç—É\n"
            "4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∫–∞–¥—Ä–∞\n"
            "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∑–∞–¥–∞–Ω–∏–µ–º!"
        )
        bot.send_message(
            message.chat.id,
            response,
            reply_markup=create_menu()
        )
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {str(e)}")

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def handle_help(message):
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text == 'üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
def handle_ask_question(message):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' –æ—Ç {message.chat.id}")
        msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑?'):", reply_markup=None)
        bot.register_next_step_handler(msg, process_text_question)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ask_question: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_menu())

@bot.message_handler(func=lambda message: message.text == 'üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ')
def handle_ask_photo(message):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –æ—Ç {message.chat.id}")
        bot.send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∑–∞–¥–∞–Ω–∏–µ–º:\n‚Ä¢ –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ–∫—Å—Ç–µ\n‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç—É", reply_markup=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ask_photo: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_menu())

def process_text_question(message):
    try:
        chat_id = message.chat.id
        question = message.text
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç {chat_id}: {question}")

        if len(question) < 3:
            bot.send_message(chat_id, "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.", reply_markup=create_menu())
            return

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        bot.send_chat_action(chat_id, 'typing')

        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        search_results = search_internet(question)
        
        if not search_results or search_results[0]['title'] == "–ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è":
            bot.send_message(
                chat_id, 
                "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é",
                reply_markup=create_menu()
            )
            return

        # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        best_result = search_results[0]
        context = best_result['snippet']
        title = best_result['title']
        url = best_result['url']

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_answer = get_ai_answer(question, context)
        
        if ai_answer:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            response_text = f"ü§ñ <b>–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:</b>\n{ai_answer}\n\n"
            response_text += f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {title}\n"
            if url != "#" and url:
                response_text += f"<a href='{url}'>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
        else:
            # –ï—Å–ª–∏ –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response_text = f"üîç <b>–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{context}\n\n"
            response_text += f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {title}\n"
            if url != "#" and url:
                response_text += f"<a href='{url}'>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_history(chat_id, question, response_text)

        bot.send_message(
            chat_id=chat_id,
            text=response_text,
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=create_menu()
        )
        logger.info("–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_text_question: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=create_menu())

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        chat_id = message.chat.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {chat_id}")
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_data = bot.download_file(file_info.file_path)
        bot.send_message(chat_id, "üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        bot.send_chat_action(chat_id, 'typing')
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
        start_time = time.time()
        text = process_image(file_data)
        elapsed_time = time.time() - start_time
        logger.info(f"OCR –∑–∞–Ω—è–ª {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        if not text or len(text) < 10:
            bot.send_message(
                chat_id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –£–ª—É—á—à–∏—Ç—å –æ—Å–≤–µ—â–µ–Ω–∏–µ\n‚Ä¢ –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–µ\n‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥ –ø—Ä—è–º—ã–º —É–≥–ª–æ–º\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                reply_markup=create_menu()
            )
            return
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_text = text[:300] + "..." if len(text) > 300 else text
        bot.send_message(
            chat_id,
            f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n<code>{display_text}</code>",
            parse_mode='HTML',
            reply_markup=create_menu()
        )
        # –ò—â–µ–º –æ—Ç–≤–µ—Ç –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
        bot.send_message(chat_id, "üîç –ò—â—É –æ—Ç–≤–µ—Ç –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É...")
        search_results = search_internet(text)

        if not search_results or search_results[0]['title'] == "–ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è":
            bot.send_message(chat_id, "‚ùå –ü–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=create_menu())
            return

        # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        best_result = search_results[0]
        context = best_result['snippet']
        title = best_result['title']
        url = best_result['url']

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_answer = get_ai_answer(text[:100] + "...", context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
        
        if ai_answer:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
            response_text = f"ü§ñ <b>–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:</b>\n{ai_answer}\n\n"
            response_text += f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {title}\n"
            if url != "#" and url:
                response_text += f"<a href='{url}'>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
        else:
            # –ï—Å–ª–∏ –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            response_text = f"üîç <b>–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{context}\n\n"
            response_text += f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {title}\n"
            if url != "#" and url:
                response_text += f"<a href='{url}'>üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        save_history(chat_id, f"–§–æ—Ç–æ: {text[:50]}...", response_text)

        bot.send_message(
            chat_id=chat_id,
            text=response_text,
            parse_mode='HTML',
            disable_web_page_preview=True,
            reply_markup=create_menu()
        )
        logger.info("–û—Ç–≤–µ—Ç –ø–æ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=create_menu())

@bot.message_handler(func=lambda message: message.text == 'üìö –ò—Å—Ç–æ—Ä–∏—è')
def handle_history(message):
    try:
        chat_id = message.chat.id
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ '–ò—Å—Ç–æ—Ä–∏—è' –æ—Ç {chat_id}")
        if chat_id not in user_history or not user_history[chat_id]:
            bot.send_message(chat_id, "üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=create_menu())
            return
        history = user_history[chat_id]
        response = "üìö –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
        for i, item in enumerate(reversed(history), 1):
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            question = item['question'] if len(item['question']) < 50 else item['question'][:50] + "..."
            response += f"<b>{i}. –í–æ–ø—Ä–æ—Å:</b> {question}\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
            first_result = item['response'].split('\n')[0] if '\n' in item['response'] else item['response'][:100] + "..."
            response += f"<b>–û—Ç–≤–µ—Ç:</b> {first_result}\n"
            response += "‚îÄ" * 20 + "\n"
        bot.send_message(
            chat_id,
            response,
            parse_mode='HTML',
            reply_markup=create_menu()
        )
        logger.info("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_history: {str(e)}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.", reply_markup=create_menu())

@app.route('/')
def home():
    return "ü§ñ Telegram Study Bot –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram"

@app.route('/health')
def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return "OK", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.headers.get('content-type') == 'application/json':
            json_data = request.get_json()
            logger.info("–ü–æ–ª—É—á–µ–Ω webhook-–∑–∞–ø—Ä–æ—Å")
            update = telebot.types.Update.de_json(json_data)
            bot.process_new_updates([update])
            return '', 200
        return 'Bad request', 400
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {str(e)}")
        return 'Server error', 500

def configure_webhook():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –î–ª—è Render.com
        if os.environ.get('RENDER'):
            external_url = os.environ.get('RENDER_EXTERNAL_URL')
            if external_url:
                webhook_url = f"{external_url}/webhook"
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
                try:
                    bot.get_me()
                    logger.info("–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É: {str(e)}")
                    return
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
                bot.remove_webhook()
                logger.info("–°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
                def set_webhook_background():
                    import time
                    time.sleep(3)
                    try:
                        bot.set_webhook(url=webhook_url)
                        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ
                        webhook_info = bot.get_webhook_info()
                        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ: {webhook_info}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
                thread = threading.Thread(target=set_webhook_background)
                thread.daemon = True
                thread.start()
                return
            else:
                logger.warning("RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º/–ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        bot.remove_webhook()
        logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
configure_webhook()

# –î–ª—è Docker - –∑–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    logger.info(f"–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(host='0.0.0.0', port=port, debug=False)
