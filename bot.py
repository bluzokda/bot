import os
import telebot
import requests
import logging
import pytesseract
from PIL import Image, ImageEnhance
import io
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import threading
import time
import base64
import hashlib
from collections import deque
import json
from concurrent.futures import ThreadPoolExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
DEEPSEEK_API_KEY = os.environ.get('DEEPSEEK_API_KEY')

if not BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if not DEEPSEEK_API_KEY:
    logger.warning("DEEPSEEK_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
if os.environ.get('PYTESSERACT_TESSERACT_CMD'):
    pytesseract.pytesseract.tesseract_cmd = os.environ['PYTESSERACT_TESSERACT_CMD']

bot = telebot.TeleBot(BOT_TOKEN)
logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Tesseract
try:
    tesseract_version = pytesseract.get_tesseract_version()
    logger.info(f"Tesseract version: {tesseract_version}")
except Exception as e:
    logger.error(f"Tesseract check failed: {str(e)}")

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫—ç—à–∞
user_history = {}
question_cache = {}
image_executor = ThreadPoolExecutor(max_workers=2)
MAX_HISTORY_ITEMS = 10

def create_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(KeyboardButton('üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'))
    markup.add(KeyboardButton('üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ'), KeyboardButton('üìö –ò—Å—Ç–æ—Ä–∏—è'))
    markup.add(KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å'))
    return markup

def compress_image(image_data, max_size=1.5*1024*1024):
    """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ –ø—Ä–∏–µ–º–ª–µ–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è API"""
    if len(image_data) <= max_size:
        return image_data
        
    try:
        img = Image.open(io.BytesIO(image_data))
        quality = 85
        while len(image_data) > max_size and quality > 20:
            buffer = io.BytesIO()
            if img.mode in ('RGBA', 'LA') or (img.mode == 'P' and 'transparency' in img.info):
                img = img.convert('RGB')
            img.save(buffer, format="JPEG", quality=quality)
            image_data = buffer.getvalue()
            quality -= 15
        return image_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        return image_data

def ask_deepseek(prompt, image_data=None):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É DeepSeek API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not DEEPSEEK_API_KEY:
        return None
        
    try:
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        cache_str = prompt
        if image_data:
            # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç –¥–ª—è —Ö—ç—à–∞
            cache_str += image_data[:100].hex()
        cache_key = hashlib.md5(cache_str.encode('utf-8')).hexdigest()
        
        if cache_key in question_cache:
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return question_cache[cache_key]
        
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        messages = [
            {
                "role": "system",
                "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π —É—á–µ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML."
            }
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if image_data:
            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            compressed_image = compress_image(image_data)
            base64_image = base64.b64encode(compressed_image).decode('utf-8')
            
            user_content = [
                {"type": "text", "text": prompt},
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{base64_image}"
                    }
                }
            ]
            messages.append({"role": "user", "content": user_content})
            model = "deepseek-vision"
        else:
            messages.append({"role": "user", "content": prompt})
            model = "deepseek-chat"
        
        payload = {
            "model": model,
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 2000
        }
        
        response = requests.post(
            "https://api.deepseek.com/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=120
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
        if response.status_code == 402:
            logger.error("–û—à–∏–±–∫–∞ 402: –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ –∏–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω")
            return None
            
        response.raise_for_status()
        data = response.json()
        
        if "choices" in data and len(data["choices"]) > 0:
            result = data["choices"][0]["message"]["content"]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            question_cache[cache_key] = result
            return result
            
    except requests.exceptions.RequestException as e:
        error_detail = e.response.text if hasattr(e, 'response') and e.response else str(e)
        logger.error(f"DeepSeek API error: {e} | Response: {error_detail}")
    except Exception as e:
        logger.error(f"General error in ask_deepseek: {str(e)}")
    
    return None

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç {message.chat.id}")
        response = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–±—ã!\n\n"
            "–Ø –∏—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n"
            "‚Ä¢ –ü–æ–∏—Å–∫–æ–º —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n\n"
            "üìå –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º!"
        )
        bot.send_message(
            message.chat.id,
            response,
            reply_markup=create_menu()
        )
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {str(e)}")

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def handle_help(message):
    send_welcome(message)

@bot.message_handler(func=lambda message: message.text == 'üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
def handle_ask_question(message):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å' –æ—Ç {message.chat.id}")
        msg = bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=None)
        bot.register_next_step_handler(msg, process_text_question)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ask_question: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_menu())

@bot.message_handler(func=lambda message: message.text == 'üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ')
def handle_ask_photo(message):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –æ—Ç {message.chat.id}")
        bot.send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –∑–∞–¥–∞–Ω–∏–µ–º:", reply_markup=None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_ask_photo: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_menu())

def process_text_question(message):
    try:
        chat_id = message.chat.id
        question = message.text
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç {chat_id}: {question}")
        
        if len(question) < 3:
            bot.send_message(chat_id, "‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.", reply_markup=create_menu())
            return
            
        bot.send_chat_action(chat_id, 'typing')
        
        # –ó–∞–ø—Ä–æ—Å –∫ DeepSeek
        ai_response = ask_deepseek(question)
        
        if ai_response:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            formatted_response = f"<b>ü§ñ –û—Ç–≤–µ—Ç –æ—Ç DeepSeek:</b>\n\n{ai_response}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if chat_id not in user_history:
                user_history[chat_id] = deque(maxlen=MAX_HISTORY_ITEMS)
            user_history[chat_id].append({
                "type": "text",
                "question": question,
                "response": formatted_response
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            bot.send_message(
                chat_id,
                formatted_response,
                parse_mode='HTML',
                reply_markup=create_menu()
            )
            logger.info("–û—Ç–≤–µ—Ç –æ—Ç DeepSeek –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å API –∫–ª—é—á–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_menu()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_text_question: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=create_menu())

def handle_photo_result(future, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        chat_id = message.chat.id
        result = future.result()
        if not result:
            bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup=create_menu())
            return
            
        file_data, original_file_size, compressed_size = result
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ: –æ—Ä–∏–≥–∏–Ω–∞–ª {original_file_size/1024:.1f}KB ‚Üí —Å–∂–∞—Ç–æ {compressed_size/1024:.1f}KB")
        bot.send_message(chat_id, "ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ó–∞–ø—Ä–æ—Å –∫ DeepSeek Vision
        prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å —É—á–µ–±–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç."
        ai_response = ask_deepseek(prompt, image_data=file_data)
        
        if ai_response:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            formatted_response = (
                f"<b>üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>\n\n"
                f"<b>ü§ñ –û—Ç–≤–µ—Ç –æ—Ç DeepSeek Vision:</b>\n{ai_response}"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if chat_id not in user_history:
                user_history[chat_id] = deque(maxlen=MAX_HISTORY_ITEMS)
            user_history[chat_id].append({
                "type": "image",
                "question": "–§–æ—Ç–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º",
                "response": formatted_response,
                "file_size": f"{compressed_size/1024:.1f}KB"
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            bot.send_message(
                chat_id,
                formatted_response,
                parse_mode='HTML',
                reply_markup=create_menu()
            )
        else:
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=create_menu()
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {str(e)}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=create_menu())

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        chat_id = message.chat.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {chat_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)
        file_data = bot.download_file(file_info.file_path)
        original_size = len(file_data)
        
        bot.send_message(chat_id, "üñºÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∂–∞—Ç–∏—è
        future = image_executor.submit(
            lambda data: (compress_image(data), original_size, len(compress_image(data))),
            file_data
        )
        future.add_done_callback(lambda f: handle_photo_result(f, message))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=create_menu())

@bot.message_handler(func=lambda message: message.text == 'üìö –ò—Å—Ç–æ—Ä–∏—è')
def handle_history(message):
    try:
        chat_id = message.chat.id
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ '–ò—Å—Ç–æ—Ä–∏—è' –æ—Ç {chat_id}")
        
        if chat_id not in user_history or not user_history[chat_id]:
            bot.send_message(chat_id, "üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=create_menu())
            return
        
        history = user_history[chat_id]
        response = "üìö –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
        
        for i, item in enumerate(reversed(history), 1):
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            question = item['question'] if len(item['question']) < 50 else item['question'][:50] + "..."
            item_type = "üì∑" if item['type'] == "image" else "üìù"
            
            response += f"{item_type} <b>{i}. {question}</b>\n"
            if item['type'] == "image":
                response += f"   ‚îî –†–∞–∑–º–µ—Ä: {item.get('file_size', 'N/A')}\n"
            response += "‚îÄ" * 20 + "\n"
        
        bot.send_message(
            chat_id,
            response,
            parse_mode='HTML',
            reply_markup=create_menu()
        )
        
        logger.info("–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_history: {str(e)}")
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.", reply_markup=create_menu())

@app.route('/')
def home():
    return "ü§ñ Telegram Study Bot –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –≤ Telegram"

@app.route('/health')
def health_check():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return "OK", 200

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.headers.get('content-type') == 'application/json':
            json_data = request.get_json()
            logger.info("–ü–æ–ª—É—á–µ–Ω webhook-–∑–∞–ø—Ä–æ—Å")
            
            update = telebot.types.Update.de_json(json_data)
            bot.process_new_updates([update])
            return '', 200
        return 'Bad request', 400
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {str(e)}")
        return 'Server error', 500

def configure_webhook():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if os.environ.get('RENDER'):
            external_url = os.environ.get('RENDER_EXTERNAL_URL')
            if external_url:
                webhook_url = f"{external_url}/webhook"
                
                try:
                    bot.get_me()
                    logger.info("–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É: {str(e)}")
                    return
                
                bot.remove_webhook()
                logger.info("–°—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
                
                def set_webhook_background():
                    import time
                    time.sleep(3)
                    try:
                        bot.set_webhook(url=webhook_url)
                        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                        webhook_info = bot.get_webhook_info()
                        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ: {json.dumps(webhook_info.__dict__, indent=2)}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
                
                thread = threading.Thread(target=set_webhook_background)
                thread.daemon = True
                thread.start()
                return
            else:
                logger.warning("RENDER_EXTERNAL_URL –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        bot.remove_webhook()
        logger.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
configure_webhook()

if __name__ == '__main__':
    logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
    bot.remove_webhook()
    bot.infinity_polling()
